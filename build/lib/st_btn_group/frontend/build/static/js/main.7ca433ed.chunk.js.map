{"version":3,"sources":["BtnGroup.tsx","webpack:///./src/index.tsx?d986"],"names":["getIcon","icon","iconStyle","_icon$split","split","_icon$split2","_slicedToArray","library","iconName","console","log","IconComponent","FontAwesome","React","createElement","style","MaterialDesign","AntDesign","engine","Styletron","BtnGroup","props","_props$args","args","key","group_style","return_value","mode","disabled","theme","height","div_id","div_style","_ref","buttons","_useState","useState","_useState2","selectedIndices","setSelectedIndices","handleClick","event","index","value","idx","indexOf","splice","push","_toConsumableArray","includes","useEffect","Streamlit","setComponentValue","Array","from","values","setFrameHeight","StyletronProvider","ThemeProvider","DarkTheme","LightTheme","id","StatefulButtonGroup","MODE","undefined","initialState","selected","shape","size","onClick","eval","overrides","Root","map","button","Button","kind","startEnhancer","Fragment","frontIcon","frontIconStyle","dangerouslySetInnerHTML","__html","endEnhancer","endIcon","backIconStyle","label","withStreamlitConnection","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ca433ed.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { ReactElement } from \"react\";\r\n\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\nimport { Button } from \"baseui/button\";\r\nimport {\r\n  StatefulButtonGroup,\r\n  MODE,\r\n} from \"baseui/button-group\";\r\nimport { Client as Styletron } from \"styletron-engine-atomic\";\r\nimport { Provider as StyletronProvider } from \"styletron-react\";\r\nimport { LightTheme, DarkTheme } from \"baseui\";\r\nimport { ThemeProvider } from \"baseui\";\r\n\r\nimport { CSSProperties } from 'react';\r\nimport * as FontAwesome from 'react-icons/fa';\r\nimport * as MaterialDesign from 'react-icons/md';\r\nimport * as AntDesign from 'react-icons/ai';\r\n\r\ntype ButtonProps = {\r\n  label: string;\r\n  disabled?: boolean;\r\n  kind?: \"primary\" | \"secondary\" | \"tertiary\";\r\n  size?: string;\r\n  shape?: string;\r\n  value?: string;\r\n  overrides?: any;\r\n  frontIcon?: string;\r\n  endIcon?: string;\r\n  startEnhancer?: string;\r\n  endEnhancer?: string;\r\n  onClick?: string;\r\n  style?: React.CSSProperties;\r\n  frontIconStyle?: React.CSSProperties;\r\n  backIconStyle?: React.CSSProperties;\r\n};\r\n\r\n\r\n\r\n\r\nfunction getIcon(icon: string | undefined, iconStyle?: CSSProperties): JSX.Element | null {\r\n  if (!icon) {\r\n    return null;\r\n  }\r\n\r\n\r\n\r\n  const [library, iconName] = icon.split(\"-\");\r\n\r\n  console.log(\"Library: \", library);\r\n  console.log(\"IconName: \", iconName);\r\n\r\n  if (library === \"Fa\" && iconName) {\r\n    //iconsMap['fa'+upperFirst(camelCase(item.iconName)) as keyof typeof iconsMap]\r\n    const IconComponent = FontAwesome[iconName as keyof typeof FontAwesome];\r\n    console.log(\"IconComponent (Fa): \", IconComponent);\r\n    return IconComponent ? React.createElement(IconComponent, { style: iconStyle }) : null;\r\n  } else if (library === \"Md\" && iconName) {\r\n    const IconComponent = MaterialDesign[iconName as keyof typeof MaterialDesign];\r\n    console.log(\"IconComponent (Md): \", IconComponent);\r\n    return IconComponent ? React.createElement(IconComponent, { style: iconStyle }) : null;\r\n  } else if (library === \"Ai\" && iconName) {\r\n    const IconComponent = AntDesign[iconName as keyof typeof AntDesign];\r\n    console.log(\"IconComponent (Ai): \", IconComponent);\r\n    return IconComponent ? React.createElement(IconComponent, { style: iconStyle }) : null;\r\n  }\r\n\r\n  return null;\r\n}\r\nconst engine = new Styletron();\r\n\r\nconst BtnGroup = (props: ComponentProps) => {\r\n  const {\r\n    key,\r\n    group_style,\r\n    return_value,\r\n    mode,\r\n    disabled,\r\n    theme,\r\n    height,\r\n    div_id,\r\n    div_style,\r\n  } = props.args;\r\n\r\n  const { buttons } = props.args as { buttons: ButtonProps[] };\r\n  const [selectedIndices, setSelectedIndices] = useState<number[]>([]);\r\n\r\n  const handleClick = (\r\n    event: React.SyntheticEvent<HTMLButtonElement, Event>,\r\n    index: number,\r\n    value: string\r\n  ) => {\r\n    if (mode === \"checkbox\") {\r\n      const idx = selectedIndices.indexOf(index);\r\n      if (idx !== -1) {\r\n        selectedIndices.splice(idx, 1);\r\n      } else {\r\n        selectedIndices.push(index);\r\n      }\r\n      setSelectedIndices([...selectedIndices]);\r\n    } else if (mode === \"radio\") {\r\n      setSelectedIndices([index]);\r\n    } else {\r\n      // Normal button mode\r\n      if (selectedIndices.includes(index)) {\r\n        setSelectedIndices([]);\r\n      } else {\r\n        setSelectedIndices([index]);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (return_value) {\r\n      Streamlit.setComponentValue(Array.from(selectedIndices.values()));\r\n    }\r\n  }, [selectedIndices, return_value]);\r\n\r\n  useEffect(() => {\r\n    Streamlit.setFrameHeight(height);\r\n  }, []);\r\n\r\n  return (\r\n    <StyletronProvider value={engine}>\r\n      <ThemeProvider theme={theme === \"dark\" ? DarkTheme : LightTheme}>\r\n        <div id={div_id} style={div_style}>\r\n          <StatefulButtonGroup\r\n            key={key}\r\n            mode={mode === \"checkbox\" || mode === \"radio\" ? MODE[mode as keyof typeof MODE] : undefined}\r\n            initialState={{ selected: [] }}\r\n              shape={props.args.shape || \"default\"}\r\n\r\n              size={props.args.size || \"default\"}\r\n            onClick={(event, index) => {\r\n              handleClick(event, index, buttons[index].value || \"\");\r\n              if (buttons[index].onClick) {\r\n                eval(buttons[index].onClick || \"\");\r\n              }\r\n            }}\r\n            overrides={{\r\n              Root: {\r\n                style: group_style,\r\n              },\r\n            }}\r\n          >\r\n            {buttons.map((button, index) => (\r\n              <Button\r\n                key={key + \"_\" + index}\r\n                disabled={button.disabled || disabled}\r\n                kind={button.kind || props.args.kind}\r\n                startEnhancer={() => (\r\n                  <>\r\n                    {getIcon(button.frontIcon, button.frontIconStyle)}\r\n                    {button.startEnhancer && (\r\n                      <span dangerouslySetInnerHTML={{ __html: button.startEnhancer }} />\r\n                    )}\r\n                  </>\r\n                )}\r\n                endEnhancer={() => (\r\n                  <>\r\n                    {getIcon(button.endIcon, button.backIconStyle)}\r\n                    {button.endEnhancer && (\r\n                      <span dangerouslySetInnerHTML={{ __html: button.endEnhancer }} />\r\n                    )}\r\n                  </>\r\n                )}\r\n                style={button.style}\r\n              >\r\n                <span dangerouslySetInnerHTML={{ __html: button.label }} />\r\n              </Button>\r\n            ))}\r\n          </StatefulButtonGroup>\r\n        </div>\r\n      </ThemeProvider>\r\n    </StyletronProvider>\r\n  );\r\n};\r\n\r\nexport default withStreamlitConnection(BtnGroup);","\r\nimport React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport BtnGroup from \"./BtnGroup\"\r\n\r\n// Lots of import to define a Styletron engine and load the light theme of baseui\r\n\r\n\r\n// Wrap your CustomSlider with the baseui them\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BtnGroup />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)"],"sourceRoot":""}