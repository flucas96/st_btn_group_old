{"version":3,"sources":["BtnGroup.tsx","webpack:///./src/index.tsx?d986"],"names":["engine","Styletron","BtnGroup","props","_props$args","args","key","group_style","return_value","mode","disabled","theme","height","div_id","div_style","_ref","buttons","_useState","useState","_useState2","_slicedToArray","selectedIndices","setSelectedIndices","handleClick","event","index","value","idx","indexOf","splice","push","_toConsumableArray","includes","useEffect","Streamlit","setComponentValue","Array","from","values","setFrameHeight","React","createElement","Fragment","Helmet","rel","href","integrity","crossOrigin","StyletronProvider","ThemeProvider","DarkTheme","LightTheme","id","style","StatefulButtonGroup","MODE","undefined","initialState","selected","shape","size","onClick","eval","overrides","Root","map","button","Button","kind","startEnhancer","dangerouslySetInnerHTML","__html","endEnhancer","label","withStreamlitConnection","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"s6CAoCMA,OAAS,IAAIC,uDAEbC,SAAW,SAAXA,SAAYC,OAChB,IAAAC,YAUID,MAAME,KATRC,IAAGF,YAAHE,IACAC,YAAWH,YAAXG,YACAC,aAAYJ,YAAZI,aACAC,KAAIL,YAAJK,KACAC,SAAQN,YAARM,SACAC,MAAKP,YAALO,MACAC,OAAMR,YAANQ,OACAC,OAAMT,YAANS,OACAC,UAASV,YAATU,UAGFC,KAAoBZ,MAAME,KAAlBW,QAAOD,KAAPC,QACRC,UAA8CC,oDAAmB,IAAGC,WAAAC,iNAAAH,UAAA,GAA7DI,gBAAeF,WAAA,GAAEG,mBAAkBH,WAAA,GAEpCI,YAAc,SAClBC,EACAC,EACAC,GAEA,GAAa,aAATjB,KAAqB,CACvB,IAAMkB,EAAMN,gBAAgBO,QAAQH,IACvB,IAATE,EACFN,gBAAgBQ,OAAOF,EAAK,GAE5BN,gBAAgBS,KAAKL,GAEvBH,mBAAkBS,qNAAKV,sBACL,UAATZ,KACTa,mBAAmB,CAACG,IAGhBJ,gBAAgBW,SAASP,GAC3BH,mBAAmB,IAEnBA,mBAAmB,CAACG,KAc1B,OATAQ,sDAAU,WACJzB,cACF0B,uDAAUC,kBAAkBC,MAAMC,KAAKhB,gBAAgBiB,aAExD,CAACjB,gBAAiBb,eAErByB,sDAAU,WACRC,uDAAUK,eAAe3B,UACxB,IAED4B,6CAAAC,cAAAD,6CAAAE,SAAA,KACEF,6CAAAC,cAACE,6CAAM,KACLH,6CAAAC,cAAA,QACEG,IAAI,aACJC,KAAK,2DACLC,UAAU,0EACVC,YAAY,eAGhBP,6CAAAC,cAACO,+CAAiB,CAACtB,MAAO1B,QACxBwC,6CAAAC,cAACQ,uCAAa,CAACtC,MAAiB,SAAVA,MAAmBuC,sCAAYC,wCACnDX,6CAAAC,cAAA,OAAKW,GAAIvC,OAAQwC,MAAOvC,WACtB0B,6CAAAC,cAACa,mDAAmB,CAClBhD,IAAKA,IACLG,KACW,aAATA,MAAgC,UAATA,KACnB8C,mDAAK9C,WACL+C,EAENC,aAAc,CAAEC,SAAU,IAC1BC,MAAOxD,MAAME,KAAKsD,OAAS,UAC3BC,KAAMzD,MAAME,KAAKuD,MAAQ,UACzBC,QAAS,SAAAA,QAACrC,MAAOC,OACfF,YAAYC,MAAOC,MAAOT,QAAQS,OAAOC,OAAS,IAC9CV,QAAQS,OAAOoC,SACjBC,KAAK9C,QAAQS,OAAOoC,SAAW,KAGnCE,UAAW,CACTC,KAAM,CACJX,MAAO9C,eAIVS,QAAQiD,KAAI,SAACC,EAAQzC,GAAK,OACzBe,6CAAAC,cAAC0B,6CAAM,CACL7D,IAAKA,IAAM,IAAMmB,EACjBf,SAAUwD,EAAOxD,UAAYA,SAC7B0D,KAAMF,EAAOE,MAAQjE,MAAME,KAAK+D,KAChCC,cAAe,kBACb7B,6CAAAC,cAAAD,6CAAAE,SAAA,KACGwB,EAAOG,eACN7B,6CAAAC,cAAA,QAAM6B,wBAAyB,CAAEC,OAAQL,EAAOG,mBAItDG,YAAa,kBACXhC,6CAAAC,cAAAD,6CAAAE,SAAA,KACGwB,EAAOM,aACNhC,6CAAAC,cAAA,QAAM6B,wBAAyB,CAAEC,OAAQL,EAAOM,iBAItDnB,MAAOa,EAAOb,OAEdb,6CAAAC,cAAA,QAAM6B,wBAAyB,CAAEC,OAAQL,EAAOO,mBAUnDC,qFAAwBxE,W,oECzJvC,oDAQAyE,IAASC,OACPpC,IAAAC,cAACD,IAAMqC,WAAU,KACfrC,IAAAC,cAACvC,IAAQ,OAEX4E,SAASC,eAAe,W","file":"static/js/main.8f78e7c1.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\nimport { Button } from \"baseui/button\";\r\nimport {\r\n  StatefulButtonGroup,\r\n  MODE,\r\n} from \"baseui/button-group\";\r\nimport { Client as Styletron } from \"styletron-engine-atomic\";\r\nimport { Provider as StyletronProvider } from \"styletron-react\";\r\nimport { LightTheme, DarkTheme } from \"baseui\";\r\nimport { ThemeProvider } from \"baseui\";\r\nimport { Helmet } from 'react-helmet';\r\n\r\n\r\ntype ButtonProps = {\r\n  label: string;\r\n  disabled?: boolean;\r\n  kind?: \"primary\" | \"secondary\" | \"tertiary\";\r\n  size?: string;\r\n  shape?: string;\r\n  value?: string;\r\n  overrides?: any;\r\n \r\n  startEnhancer?: string;\r\n  endEnhancer?: string;\r\n  onClick?: string;\r\n  style?: React.CSSProperties;\r\n\r\n};\r\n\r\n\r\nconst engine = new Styletron();\r\n\r\nconst BtnGroup = (props: ComponentProps) => {\r\n  const {\r\n    key,\r\n    group_style,\r\n    return_value,\r\n    mode,\r\n    disabled,\r\n    theme,\r\n    height,\r\n    div_id,\r\n    div_style,\r\n  } = props.args;\r\n\r\n  const { buttons } = props.args as { buttons: ButtonProps[] };\r\n  const [selectedIndices, setSelectedIndices] = useState<number[]>([]);\r\n\r\n  const handleClick = (\r\n    event: React.SyntheticEvent<HTMLButtonElement, Event>,\r\n    index: number,\r\n    value: string\r\n  ) => {\r\n    if (mode === \"checkbox\") {\r\n      const idx = selectedIndices.indexOf(index);\r\n      if (idx !== -1) {\r\n        selectedIndices.splice(idx, 1);\r\n      } else {\r\n        selectedIndices.push(index);\r\n      }\r\n      setSelectedIndices([...selectedIndices]);\r\n    } else if (mode === \"radio\") {\r\n      setSelectedIndices([index]);\r\n    } else {\r\n      // Normal button mode\r\n      if (selectedIndices.includes(index)) {\r\n        setSelectedIndices([]);\r\n      } else {\r\n        setSelectedIndices([index]);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (return_value) {\r\n      Streamlit.setComponentValue(Array.from(selectedIndices.values()));\r\n    }\r\n  }, [selectedIndices, return_value]);\r\n\r\n  useEffect(() => {\r\n    Streamlit.setFrameHeight(height);\r\n  }, []);\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <link\r\n          rel=\"stylesheet\"\r\n          href=\"https://pro.fontawesome.com/releases/v5.10.0/css/all.css\"\r\n          integrity=\"sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p\"\r\n          crossOrigin=\"anonymous\"\r\n        />\r\n      </Helmet>\r\n      <StyletronProvider value={engine}>\r\n        <ThemeProvider theme={theme === \"dark\" ? DarkTheme : LightTheme}>\r\n          <div id={div_id} style={div_style}>\r\n            <StatefulButtonGroup\r\n              key={key}\r\n              mode={\r\n                mode === \"checkbox\" || mode === \"radio\"\r\n                  ? MODE[mode as keyof typeof MODE]\r\n                  : undefined\r\n              }\r\n              initialState={{ selected: [] }}\r\n              shape={props.args.shape || \"default\"}\r\n              size={props.args.size || \"default\"}\r\n              onClick={(event, index) => {\r\n                handleClick(event, index, buttons[index].value || \"\");\r\n                if (buttons[index].onClick) {\r\n                  eval(buttons[index].onClick || \"\");\r\n                }\r\n              }}\r\n              overrides={{\r\n                Root: {\r\n                  style: group_style,\r\n                },\r\n              }}\r\n            >\r\n              {buttons.map((button, index) => (\r\n                <Button\r\n                  key={key + \"_\" + index}\r\n                  disabled={button.disabled || disabled}\r\n                  kind={button.kind || props.args.kind}\r\n                  startEnhancer={() => (\r\n                    <>\r\n                      {button.startEnhancer && (\r\n                        <span dangerouslySetInnerHTML={{ __html: button.startEnhancer }} />\r\n                      )}\r\n                    </>\r\n                  )}\r\n                  endEnhancer={() => (\r\n                    <>\r\n                      {button.endEnhancer && (\r\n                        <span dangerouslySetInnerHTML={{ __html: button.endEnhancer }} />\r\n                      )}\r\n                    </>\r\n                  )}\r\n                  style={button.style}\r\n                >\r\n                  <span dangerouslySetInnerHTML={{ __html: button.label }} />\r\n                </Button>\r\n              ))}\r\n            </StatefulButtonGroup>\r\n          </div>\r\n        </ThemeProvider>\r\n      </StyletronProvider>\r\n    </>\r\n  );\r\n};\r\nexport default withStreamlitConnection(BtnGroup);","\r\nimport React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport BtnGroup from \"./BtnGroup\"\r\n\r\n// Lots of import to define a Styletron engine and load the light theme of baseui\r\n\r\n\r\n// Wrap your CustomSlider with the baseui them\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BtnGroup />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)"],"sourceRoot":""}